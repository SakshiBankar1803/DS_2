//dijkstra's algorythem

#include<stdio.h>
#include<stdlib.h>
int visited[10],cost[10][10],dist[10];
int n,i,j,s,count=1,v,min;

void dij()
{
    for(i=1;i<=n;i++)
    {
        visited[i]=0;
        dist[i]=cost[s][i];
    }
    visited[s]=1;
    dist[s]=0; 
    while(count<=n)
    {
        //min=999;
        for(i=1,min=999;i<=n;i++)
        if(dist[i]<min)
        if(visited[i]!=0)
        {
            min=dist[i];
            v=i;
        }
        visited[v]=1;
        count++;
        for(i=1;i<=n;i++)
        if(dist[i]>dist[v]+cost[v][i])
        dist[i]=dist[v]+cost[v][i];

    }
}
int main()
{
    printf("enter no of vertices::\n");
    scanf("%d",&n);
    printf("enter cost matrix::\n");
    for(i=1;i<=n;i++)
    {
      for(j=1;j<=n;j++)
      {
        scanf("%d",&cost[i][j]);
        if(cost[i][j]==0)
        cost[i][j]=999;
      }
    }
    printf("\nenter source vertex::");
    scanf("%d",&s);
    dij();

    printf("shortest path from %d is\n",s);
    for(i=1;i<=n;i++)
    {
        if(s!=i)
        printf("\n%d->%d=%d",s,i,dist[i]);
    }

}

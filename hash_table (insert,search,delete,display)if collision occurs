//Write a menu driven program to implement hash table using array (insert, search,delete,display). 
//Use any of the above-mentioned hash functions. In case of collision apply linear probing

#include<stdio.h>
int ht[10];
void init()
{
    int i;
    for(i=0;i<10;i++)
     ht[i]=-1;
}

int hash(int num,int i)
{
    return(num%10+i)%10;
}

void insert(int ht[10],int key)
{
    int i,index;
    for(i=0;i<10;i++)
    {
        index=hash(key,i);
        if(ht[index]==-1)
        {
            ht[index]=key;
            return;
        }
        ht[key]=key;
        printf("\n collision occures at %d position",index);
    }
}

void disp()
{
    int i;
    for(i=0;i<10;i++)
    printf("\n%d[%d]",i,ht[i]);
}

int search(int num)
{
    int i,index;
    for(i=0;i<10;i++)
    {
        index=hash(num,i);
        if(ht[index]==num)
        {
            return index;
        }
    }
    return -1;
}

void delete(int num)
{
    int i,index;
        index=search(num);
        if(ht[index]==-1)
        printf("number not found...");
        else
            ht[index]=-1;
            printf("number dele successfully...");

}


int main()
{
    int ch,num,ans;
    init();
    do
    {
      printf("\nenter menus::\n");
      printf("\n1=insert\n2=display\n3=search\n4=delete");
      printf("\nenter choice::");
      scanf("%d",&ch);
      switch(ch)
      {
        case 1 :printf("enter number to insert::");
                scanf("%d",&num);
                insert(ht,num);
                break;
        case 2 :disp();
                break;
        case 3 :printf("enter number to search::");
                scanf("%d",&num);
                ans=search(num);
                if(ans==-1)
                 printf("number not found....");
                else
                 printf("number found at %d position",ans);
                break;
        case 4 :printf("enter number for delete::");
                scanf("%d",&num);
                delete(num);
                break;
      }  /* code */
    } while(ch<5);
    
}
